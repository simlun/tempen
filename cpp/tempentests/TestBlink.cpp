#include "catch.h"

#include <Led.h>
#include <Stopwatch.h>
#include <ControlLoop.h>
#include <Blinky.h>
#include <MicroController.h>

#include "FakeStopwatch.h"


class Counter : public ControlLoop {
public:
    int getCount() {
        return count;
    }
    void body() override {
        count++;
    }
private:
    int count = 0;
};


SCENARIO("Blinking a LED") {

    GIVEN("micro controller with a simple counting control loop") {
        Counter counter;
        REQUIRE(counter.getCount() == 0);

        MicroController mc(&counter);

        WHEN("a micro controller is running, it ticks the control loop") {
            mc.tick();

            THEN("the body of the control loop is executed") {
                REQUIRE(counter.getCount() == 1);

                AND_WHEN("the ticking continues") {
                    mc.tick();
                    mc.tick();

                    THEN("the body of the control loop is executed again and again") {
                        REQUIRE(counter.getCount() == 3);
                    }
                }
            }
        }
    }

    GIVEN("a LED") {
        Led led;

        WHEN("it is in its default state") {
            THEN("it is not glowing") {
                REQUIRE(!led.isGlowing());
            }
        }

        WHEN("it is enabled") {
            led.enable();
            THEN("it is glowing") {
                REQUIRE(led.isGlowing());
            }

            AND_WHEN("it is disabled") {
                led.disable();
                THEN("it is not glowing") {
                    REQUIRE(!led.isGlowing());
                }
            }
        }
    }

    GIVEN("a micro controller with a control loop using a stopwatch to blink a LED every second") {
        FakeStopwatch stopwatch;
        Led led;
        Blinky blinky(&stopwatch, &led);

        MicroController mc(&blinky);

        WHEN("it starts") {
            stopwatch.setMillisecondsSinceStart(0);
            mc.tick();
            THEN("the led is not glowing") {
                REQUIRE(!led.isGlowing());
            }
        }

        WHEN("less than one second has passed since the last observed stopwatch") {
            stopwatch.setMillisecondsSinceStart(0);
            mc.tick();
            stopwatch.setMillisecondsSinceStart(500);
            mc.tick();
            THEN("the LED is still not glowing") {
                REQUIRE(!led.isGlowing());
            }
        }

        WHEN("one second has passed since the last observed stopwatch") {
            stopwatch.setMillisecondsSinceStart(0);
            mc.tick();
            stopwatch.setMillisecondsSinceStart(1000);
            mc.tick();
            THEN("the LED is glowing") {
                REQUIRE(led.isGlowing());

                AND_WHEN("a bit more than 1 seconds has passed") {
                    stopwatch.setMillisecondsSinceStart(1250);
                    mc.tick();

                    THEN("the LED is still glowing!") {
                        REQUIRE(led.isGlowing());
                    }
                }
            }
        }

        WHEN("every second passes") {
            THEN("the LED blinks") {
                stopwatch.setMillisecondsSinceStart(0);
                mc.tick();
                REQUIRE(!led.isGlowing());

                stopwatch.setMillisecondsSinceStart(1000);
                mc.tick();
                REQUIRE(led.isGlowing());

                stopwatch.setMillisecondsSinceStart(2000);
                mc.tick();
                REQUIRE(!led.isGlowing());

                stopwatch.setMillisecondsSinceStart(3000);
                mc.tick();
                REQUIRE(led.isGlowing());

                stopwatch.setMillisecondsSinceStart(4000);
                mc.tick();
                REQUIRE(!led.isGlowing());

                stopwatch.setMillisecondsSinceStart(5000);
                mc.tick();
                REQUIRE(led.isGlowing());
            }
        }
    }
}

SCENARIO("Edge cases") {
    GIVEN("the standard Blinky setup") {
        FakeStopwatch stopwatch;
        Led led;
        Blinky blinky(&stopwatch, &led);
        MicroController mc(&blinky);
        WHEN("the timer overflows") {
            THEN("the LED blinks are unaffected") {
                stopwatch.setMillisecondsSinceStart(0);
                mc.tick();
                REQUIRE(!led.isGlowing());

                stopwatch.setMillisecondsSinceStart(ULONG_MAX - 500);
                mc.tick();
                REQUIRE(led.isGlowing());

                for (unsigned long i = ULONG_MAX - 10; i <= ULONG_MAX - 1; i++) {
                    stopwatch.setMillisecondsSinceStart(i);
                    mc.tick();
                    REQUIRE(led.isGlowing());
                }

                stopwatch.setMillisecondsSinceStart(ULONG_MAX);
                mc.tick();
                REQUIRE(led.isGlowing());

                stopwatch.setMillisecondsSinceStart(0);
                mc.tick();
                REQUIRE(led.isGlowing());

                for (unsigned long i = 1; i <= 480; i++) {
                    stopwatch.setMillisecondsSinceStart(i);
                    mc.tick();
                    REQUIRE(led.isGlowing());
                }

                stopwatch.setMillisecondsSinceStart(500);
                mc.tick();
                REQUIRE(!led.isGlowing());

                stopwatch.setMillisecondsSinceStart(1500);
                mc.tick();
                REQUIRE(led.isGlowing());
            }
        }
    }
}
