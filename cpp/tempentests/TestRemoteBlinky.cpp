#include "catch.h"
#include <MicroController.h>
#include <Blinky.h>
#include <Sender.h>

#include "FakeStopwatch.h"


class ReceiveHandler {
public:
    virtual void handle(char c) = 0;
};


class Receiver {
public:
    void setHandler(ReceiveHandler * h) {
        handler = h;
    }
    virtual void receive() = 0;
protected:
    ReceiveHandler * handler = nullptr;
};


enum RemoteLedProtocol {
    ENABLE = '1',
    DISABLE = '0'
};


class RemoteLed : public Led {
public:
    explicit RemoteLed(Sender * sender) : sender(sender) {}

    void enable() override {
        Led::enable();
        sender->send(RemoteLedProtocol::ENABLE);
    };

    void disable() override {
        Led::disable();
        sender->send(RemoteLedProtocol::DISABLE);
    };
private:
    Sender * sender;
};


class RemoteLedController : public ControlLoop, public ReceiveHandler {
public:
    RemoteLedController(Receiver * receiver, Led * led) : receiver(receiver), led(led) {
        receiver->setHandler(this);
    }
    void body() override {
        receiver->receive();
    }
    void handle(char c) override {
        if (c == RemoteLedProtocol::ENABLE)
            led->enable();
        else if (c == RemoteLedProtocol::DISABLE)
            led->disable();
    }

private:
    Receiver * receiver;
    Led * led;
};


class TestChannel : public Sender, public Receiver {
public:
    void send(char c) override {
        mystack.push_back(c);
    }

    void receive() override {
        if (mystack.empty())
            return;

        char c = mystack.back();
        mystack.pop_back();

        handler->handle(c);
    }

private:
    std::vector<char> mystack;
};


SCENARIO("Blinking a led on a remote micro controller") {
    GIVEN("a shared micro controller-to-micro controller communications channel") {
        TestChannel channel;

        GIVEN("a micro controller running Blinky with a RemoteLed") {
            Sender * sender = &channel;
            RemoteLed remoteLed(sender);
            FakeStopwatch stopwatch;
            Blinky masterLoop(&stopwatch, &remoteLed);
            MicroController master(&masterLoop);

            GIVEN("another micro controller with a real LED") {
                Led realLed;
                Receiver * receiver = &channel;
                RemoteLedController remoteControlLoop(receiver, &realLed);
                MicroController remote(&remoteControlLoop);

                WHEN("the remote micro controller is started") {
                    stopwatch.setMillisecondsSinceStart(0);
                    master.tick();
                    remote.tick();
                    THEN("its LED is not glowing") {
                        REQUIRE(!realLed.isGlowing());
                    }
                }

                WHEN("one second has passed since the last observed stopwatch") {
                    stopwatch.setMillisecondsSinceStart(0);
                    master.tick();
                    remote.tick();
                    stopwatch.setMillisecondsSinceStart(1000);
                    master.tick();
                    remote.tick();
                    THEN("the LED is glowing") {
                        REQUIRE(realLed.isGlowing());
                    }
                }
            }

        }
    }


}