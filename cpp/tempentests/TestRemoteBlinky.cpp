#include "catch.h"
#include <MicroController.h>
#include <Blinky.h>

#include "FakeStopwatch.h"


class Channel {
public:
    // The protocol:
    static const char PROTOCOL_ENABLE_LED = '1';
    static const char PROTOCOL_DISABLE_LED = '0';

    void send(char c) {
        mystack.push_back(c);
    }

    char receive() {
        if (mystack.empty())
            return NULL;

        char c = mystack.back();
        mystack.pop_back();
        return c;
    }

private:
    std::vector<char> mystack;
};


class RemoteLed : public Led {
public:
    explicit RemoteLed(Channel * channel) : channel(channel) {}

    void enable() override {
        Led::enable();
        channel->send(channel->PROTOCOL_ENABLE_LED);
    };

    void disable() override {
        Led::disable();
        channel->send(channel->PROTOCOL_DISABLE_LED);
    };

private:
    Channel *channel;
};


class RemoteLedController : public ControlLoop {
public:
    RemoteLedController(Led *led, Channel *channel) : led(led), channel(channel) {}
    void body() override {
        char received = channel->receive();
        if (received == channel->PROTOCOL_ENABLE_LED)
            led->enable();
        else if (received == channel->PROTOCOL_DISABLE_LED)
            led->disable();
    }

private:
    Led *led;
    Channel *channel;
};


SCENARIO("Blinking a led on a remote micro controller") {
    GIVEN("a shared micro controller-to-micro controller communications channel") {
        Channel channel;

        GIVEN("a micro controller running Blinky with a RemoteLed") {
            RemoteLed remoteLed(&channel);
            FakeStopwatch stopwatch;
            Blinky masterLoop(&stopwatch, &remoteLed);
            MicroController master(&masterLoop);

            GIVEN("another micro controller with a real LED") {
                Led realLed;
                RemoteLedController remoteControlLoop(&realLed, &channel);
                MicroController remote(&remoteControlLoop);

                WHEN("the remote micro controller is started") {
                    stopwatch.setMillisecondsSinceStart(0);
                    master.tick();
                    remote.tick();
                    THEN("its LED is not glowing") {
                        REQUIRE(!realLed.isGlowing());
                    }
                }

                WHEN("one second has passed since the last observed stopwatch") {
                    stopwatch.setMillisecondsSinceStart(0);
                    master.tick();
                    remote.tick();
                    stopwatch.setMillisecondsSinceStart(1000);
                    master.tick();
                    remote.tick();
                    THEN("the LED is glowing") {
                        REQUIRE(realLed.isGlowing());
                    }
                }
            }

        }
    }


}